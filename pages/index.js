import {useState} from 'react';
import Head from 'next/head'
import TaskForm from "../components/forms/taskForm";
import AddressForm from "../components/forms/addressForm";
import ProxyForm from "../components/forms/proxyForm";
import {Table, Popconfirm, Space, message} from 'antd';


function Home(props) {
    const [tasks, setTasks] = useState(props.tasks);
    const [addresses, setAddresses] = useState(props.addresses);
    const [proxies, setProxies] = useState(props.proxies);
    return (
        <div>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <main>
                <div>
                    <h1>Tasks</h1>
                    <Table columns={[
                        {
                            title: 'ID',
                            dataIndex: 'id',
                            key: 'id',
                        },
                        {
                            title: 'site_id',
                            dataIndex: 'site_id',
                            key: 'site_id',
                        },
                        {
                            title: 'url',
                            dataIndex: 'url',
                            key: 'url',
                        },
                        {
                            title: 'style_index',
                            dataIndex: 'style_index',
                            key: 'style_index',
                        },
                        {
                            title: 'product_code',
                            dataIndex: 'product_code',
                            key: 'product_code',
                        },
                        {
                            title: 'size',
                            dataIndex: 'size',
                            key: 'size',
                        },
                        {
                            title: 'shipping_speed_index',
                            dataIndex: 'shipping_speed_index',
                            key: 'shipping_speed_index',
                        },
                        {
                            title: 'billing_address_id',
                            dataIndex: 'billing_address_id',
                            key: 'billing_address_id',
                        },
                        {
                            title: 'shipping_address_id',
                            dataIndex: 'shipping_address_id',
                            key: 'shipping_address_id',
                        },
                        {
                            title: 'notification_email_address',
                            dataIndex: 'notification_email_address',
                            key: 'notification_email_address',
                        },
                        {
                            title: 'Action',
                            key: 'action',
                            render: ({id}) => (
                                <Space size="middle">
                                    <Popconfirm
                                        title="Are you sure to start this task?"
                                        onConfirm={async () => {
                                            await fetch(`http://localhost:3001/v1/tasks/${id}/start`, {
                                                method: 'post',
                                                body: JSON.stringify({card_friendly_name: 'Test'})
                                            });
                                            message.success('Task successfully started');
                                        }}
                                        okText="Yes"
                                        cancelText="No"
                                    >
                                        <a>Start</a>
                                    </Popconfirm>
                                    <Popconfirm
                                        title="Are you sure to delete this task?"
                                        onConfirm={async () => {
                                            await fetch(`http://localhost:3001/v1/tasks/${id}`, {
                                                method: 'delete'
                                            });
                                            setTasks(tasks.filter(task => task.id != id));
                                        }}
                                        okText="Yes"
                                        cancelText="No"
                                    >
                                        <a>Delete</a>
                                    </Popconfirm>
                                </Space>
                            ),
                        },
                    ]}
                           dataSource={tasks.map((task) => ({
                               key: task.id,
                               id: task.id,
                               site_id: task.site_id,
                               url: task.url,
                               size: task.size,
                               product_code: task.product_code,
                               style_index: task.style_index,
                               shipping_speed_index: task.shipping_speed_index,
                               billing_address_id: task.billing_address_id,
                               shipping_address_id: task.shipping_address_id,
                               notification_email_address: task.notification_email_address
                           }))}
                    />
                    <h1>Create Tasks</h1>
                    <h3>
                        nike (id = 1)
                        footsites (id = 2)
                        shopify (id = 3)
                        demandware (id = 4)
                        supremenewyork (id = 5)
                    </h3>
                    <TaskForm setTasks={setTasks} tasks={tasks}/>
                </div>
                <div>
                    <h1>Address</h1>
                    <Table columns={[
                        {
                            title: 'ID',
                            dataIndex: 'id',
                            key: 'id',
                        },
                        {
                            title: 'Type',
                            dataIndex: 'type',
                            key: 'type',
                        },
                        {
                            title: 'Name',
                            dataIndex: 'name',
                            key: 'name',
                        },
                        {
                            title: 'Address',
                            dataIndex: 'address',
                            key: 'address',
                        },
                        {
                            title: 'Email',
                            dataIndex: 'email',
                            key: 'email',
                        },
                        {
                            title: 'Phone',
                            dataIndex: 'phone',
                            key: 'phone',
                        },
                        {
                            title: 'Action',
                            key: 'action',
                            render: ({id}) => (
                                <Space size="middle">
                                    <Popconfirm
                                        title="Are you sure to delete this address?"
                                        onConfirm={async () => {
                                            await fetch(`http://localhost:3001/v1/addresses/${id}`, {
                                                method: 'delete'
                                            });
                                            setAddresses(addresses.filter(address => address.id != id));
                                        }}
                                        okText="Yes"
                                        cancelText="No"
                                    >
                                        <a>Delete</a>
                                    </Popconfirm>
                                </Space>
                            ),
                        },
                    ]}
                           dataSource={addresses.map((address) => ({
                               key: address.id,
                               id: address.id,
                               type: address.type,
                               name: address.first_name + ' ' + address.last_name,
                               address: [address.address_line_1, address.address_line_2, address.city, address.state, address.postal_code, address.country].join(', '),
                               email: address.email_address,
                               phone: address.phone_number
                           }))}/>
                    <h1>Create Address</h1>
                    <AddressForm setAddresses={setAddresses} addresses={addresses}/>
                </div>
                <div>
                    <h1>Proxy</h1>
                    <Table columns={[
                        {
                            title: 'ID',
                            dataIndex: 'id',
                            key: 'id',
                        },
                        {
                            title: 'ip_address',
                            dataIndex: 'ip_address',
                            key: 'ip_address',
                        },
                        {
                            title: 'port',
                            dataIndex: 'port',
                            key: 'port',
                        },
                        {
                            title: 'protocol',
                            dataIndex: 'protocol',
                            key: 'protocol',
                        },
                        {
                            title: 'username',
                            dataIndex: 'username',
                            key: 'username',
                        },
                        {
                            title: 'password',
                            dataIndex: 'password',
                            key: 'password',
                        },
                        {
                            title: 'Action',
                            key: 'action',
                            render: ({id}) => (
                                <Space size="middle">
                                    <Popconfirm
                                        title="Are you sure to delete this Proxy?"
                                        onConfirm={async () => {
                                            await fetch(`http://localhost:3001/v1/proxies/${id}`, {
                                                method: 'delete'
                                            });
                                            setProxies(proxies.filter(proxy => proxy.id != id));
                                        }}
                                        okText="Yes"
                                        cancelText="No"
                                    >
                                        <a>Delete</a>
                                    </Popconfirm>
                                </Space>
                            ),
                        },
                    ]} dataSource={proxies.map((proxy) => ({
                        key: proxy.id,
                        id: proxy.id,
                        ip_address: proxy.ip_address,
                        protocol: proxy.protocol,
                        port: proxy.port,
                        username: proxy.username,
                        password: proxy.password
                    }))}/>
                    <h1>Create Proxy</h1>
                    <ProxyForm setProxies={setProxies} proxies={proxies}/>
                </div>
            </main>
        </div>
    )
}

Home.getInitialProps = async () => {
    let props = {tasks: [], addresses: [], proxies: []};
    const tasksRes = await fetch('http://localhost:3001/v1/tasks');
    const tasksJson = await tasksRes.json();
    if (tasksJson.success) {
        props.tasks = tasksJson.data
    }
    const addressesRes = await fetch('http://localhost:3001/v1/addresses');
    const addressesJson = await addressesRes.json();
    if (addressesJson.success) {
        props.addresses = addressesJson.data
    }
    const proxiesRes = await fetch('http://localhost:3001/v1/proxies');
    const proxiesJson = await proxiesRes.json();
    if (proxiesJson.success) {
        props.proxies = proxiesJson.data
    }
    return props;
}
export default Home;
