'use strict';

angular.module('ssNg', [
    'ssNg.auth',
    'ssNg.stores',
    'ssNg.staff',
    'ssNg.snapIns',
    'ssNg.news',
    'ssNg.search',
    'ssNg.feedback',
    'ssNg.requests',
    'ssNg.requestFeedback',
    'ssNg.products',
    'ssNg.profiles',
    'ssNg.insights',
    'ssNg.notifications',
    'ngCookies',
    'ngResource',
    'ngSanitize',
    'ui.router',
    'ui.bootstrap',
    'validation.match',
    'angularMoment',
    'mentio'
])
    .config(['$urlRouterProvider', '$locationProvider', '$provide', function ($urlRouterProvider, $locationProvider, $provide) {
        $urlRouterProvider.otherwise('/');
        $locationProvider.html5Mode(true);
        $provide.value("apiRoot", '/api');

    }]).run(['Auth', '$state', '$location', '$rootScope', 'staffService', '$window', 'featureService', function (Auth, $state, $location, $rootScope, staffService, $window, featureService) {

    $window.ga('create', 'UA-79858809-1', 'auto');

    $rootScope.$on("$stateChangeError", console.log.bind(console));

    $rootScope.$on('$stateChangeStart', function (event, next, nextParams, current) {
        if (next.authenticate) {
            Auth.getStoreAsync().then(function (store) {
                if (!store || !store.id) {
                    $state.go('public');
                    event.preventDefault();
                } else {
                    staffService.checkMemberSelected(store);
                }
            });
        }
    });

    if (featureService.isEnabled('feature_analytics')) {
        $rootScope.$on('$stateChangeSuccess', function (event) {
            $window.ga('send', 'pageview', $location.url());
        });
    }

}]);

'use strict';

(function () {
    angular.module('ssNg').directive('classicSignin', ClassicSignin);
    function ClassicSignin() {
        return {
            restrict: 'E',
            scope: {},
            controllerAs: 'vm',
            bindToController: {},
            templateUrl: 'components/auth/classic/classicSignin.html',
            controller: ['Auth', '$window', function (Auth, $window) {
                var vm = this;

                vm.user = {};
                vm.errors = {};
                vm.submitted = false;

                vm.login = function (form) {
                    vm.submitted = true;
                    if (!form.$valid) return;
                    Auth.login(vm.user).then(function (res) {
                        $window.location.href = '/';
                    })
                        .catch(function (e) {
                            vm.errors.other = e.message;
                        });
                };
            }]
        }
    }
})();

'use strict';

angular.module('ssNg.util', []);

'use strict';

(function() {

/**
 * The Util service is for thin, globally reusable, utility functions
 */
function UtilService($window) {
  var Util = {
    /**
     * Return a callback or noop function
     *
     * @param  {Function|*} cb - a 'potential' function
     * @return {Function}
     */
    safeCb: function(cb) {
      return (angular.isFunction(cb)) ? cb : angular.noop;
    },

    /**
     * Parse a given url with the use of an anchor element
     *
     * @param  {String} url - the url to parse
     * @return {Object}     - the parsed url, anchor element
     */
    urlParse: function(url) {
      var a = document.createElement('a');
      a.href = url;
      return a;
    },

    /**
     * Test whether or not a given url is same origin
     *
     * @param  {String}           url       - url to test
     * @param  {String|String[]}  [origins] - additional origins to test against
     * @return {Boolean}                    - true if url is same origin
     */
    isSameOrigin: function(url, origins) {
      url = Util.urlParse(url);
      origins = (origins && [].concat(origins)) || [];
      origins = origins.map(Util.urlParse);
      origins.push($window.location);
      origins = origins.filter(function(o) {
        return url.hostname === o.hostname &&
          url.port === o.port &&
          url.protocol === o.protocol;
      });
      return (origins.length >= 1);
    }
  };

  return Util;
}

angular.module('ssNg.util')
  .factory('Util', UtilService);

})();

angular.module('ssNg').factory('_', function () {
    return window._;
});
'use strict';

(function () {
    angular.module('ssNg').directive('skuSelector', SkuSelector);
    function SkuSelector() {
        return {
            restrict: 'E',
            scope: {},
            controllerAs: 'vm',
            bindToController: {
                feedback: '=',
                variations: '=',
                requestfeedback: '='
            },
            templateUrl: 'components/skuSelector/skuSelector.html',
            controller: ['$scope', function ($scope) {
                var vm = this;

                vm.allSkus = true;

                if (vm.feedback) {

                    $scope.$watch('vm.allSkus', function () {
                        if (vm.allSkus) vm.feedback.appliesTo = [];
                    });

                    vm.feedback.appliesTo = vm.feedback.appliesTo || [];

                    vm.isSelected = function (tag) {
                        return vm.feedback.appliesTo.indexOf(tag) > -1;
                    };

                    vm.areSelected = function (tag1, tag2) {
                        return vm.isSelected(tag1) || vm.isSelected(tag2);
                    };

                    vm.toggle = function (attribute, tag) {
                        var indexOf = vm.feedback.appliesTo.indexOf(tag);
                        if (indexOf > -1) {
                            vm.feedback.appliesTo.splice(indexOf, 1);
                        } else {
                            vm.feedback.appliesTo.push(tag);
                        }
                    }
                }
                if(vm.requestfeedback){
                    $scope.$watch('vm.allSkus', function () {
                        if (vm.allSkus) vm.requestfeedback.appliesTo = [];
                    });

                    vm.requestfeedback.appliesTo = vm.requestfeedback.appliesTo || [];

                    vm.isSelected = function (tag) {
                        return vm.requestfeedback.appliesTo.indexOf(tag) > -1;
                    };

                    vm.areSelected = function (tag1, tag2) {
                        return vm.isSelected(tag1) || vm.isSelected(tag2);
                    };

                    vm.toggle = function (attribute, tag) {
                        var indexOf = vm.requestfeedback.appliesTo.indexOf(tag);
                        if (indexOf > -1) {
                            vm.requestfeedback.appliesTo.splice(indexOf, 1);
                        } else {
                            vm.requestfeedback.appliesTo.push(tag);
                        }

                    }
                }
            }]
        }
    }
})();
'use strict';

angular.module('ssNg')
  .directive('oauthButtons', function() {
    return {
      templateUrl: 'components/oauth-buttons/oauth-buttons.html',
      restrict: 'EA',
      controller: 'OauthButtonsCtrl',
      controllerAs: 'OauthButtons',
      scope: {
        classes: '@'
      }
    };
  });

'use strict';

angular.module('ssNg')
    .controller('OauthButtonsCtrl', ['$window', function ($window) {
        this.loginOauth = function (provider) {
            sessionStorage.clear();
            $window.location.href = '/auth/' + provider;
        };
    }]);

'use strict';

angular.module('ssNg')
  .directive('navbar', function () {
    return {
    templateUrl: 'components/navbar/navbar.html',
    restrict: 'E',
    controller: 'NavbarController',
    controllerAs: 'nav'
  }});

'use strict';

(function () {

    angular.module('ssNg')
        .controller('NavbarController', ['Auth', 'staffService', '$window', 'notificationService', NavbarController]);

    function NavbarController(Auth, staffService, $window, notificationService) {

        var that = this;

        this.isLoggedIn = Auth.isLoggedIn;
        this.isAdmin = Auth.isAdmin;
        this.getCurrentUser = Auth.getCurrentUser;

        this.getUnreadCount = function(){
            return notificationService.getUnread().length;
        };

        this.menu = [];

        this.signOut = function () {
            Auth.logout();
        };

        this.hasStaff = function () {
            if (!Auth.getCurrentUser().staff) return false;
            return Auth.getCurrentUser().staff.length > 0
        };

        this.getStaffMember = staffService.getCurrentStaffMember;

        this.openMemberSelector = staffService.openMemberSelector;

        this.signIn = function () {
            $window.location.href = '/auth/google';
        }
    }

})();

angular.module('ssNg').factory('messaging', ['$window', function ($window) {

    function Messaging(){
        // this.client = window.PUBNUB.init({
        //     ssl: true,
        //     subscribe_key: 'sub-c-0777862a-17ea-11e6-b700-0619f8945a4f',
        //     error: function (error) {
        //         console.log('Error:', error);
        //     }
        // });
    }

    /**
     * @param entityType
     * @param eventName created|updated|deleted
     * @returns {*}
     */
    Messaging.prototype.getChannelKey  = function(entityType, eventName, recipientId){
        var key = 'channel:' + getHost() + ':' + entityType + ':' + eventName;
        if(recipientId) key += ':' + recipientId;
        return key;
    };

    return new Messaging();

    function getHost(){
        return $window.location.protocol + "//" + $window.location.hostname  +
            (window.location.port ? ':' + $window.location.port : '');
    }
}]);
'use strict';

(function () {
    angular.module('ssNg').directive('ssImage', Image);
    function Image() {
        return {
            restrict: 'E',
            scope: {},
            controllerAs: 'vm',
            bindToController: {
                src : '=',
                height : '=',
                width : '=',
                class : '=',
            },
            templateUrl: 'components/images/ssImage.html',
            controller : ['imageService', function(imageService){
                var vm = this;
                vm.getFullImageUrl = function(){
                    return vm.src ? imageService.getUrl(vm.src) : '';
                }
            }]
        }
    }
})();
angular.module('ssNg').factory('imageService', ['Auth', function (Auth) {

    var productUrlPrefix = null;

    function ImageService(){
        Auth.getStoreAsync().then(function(res){
            productUrlPrefix = res.organisation.productUrlPrefix;
        })
    }

    /**
     * @param image
     * @returns {*}
     */
    ImageService.prototype.getUrl  = function(image){
        if(!productUrlPrefix) return null;
        return productUrlPrefix + image;
    };

    return new ImageService();

}]);
'use strict';

angular.module('ssNg')
  .directive('footer', function () {
    return {
      templateUrl: 'components/footer/footer.html',
      restrict: 'E',
      link: function(scope, element) {
        element.addClass('footer');
      }
    };
  });

'use strict';

(function () {
    angular.module('ssNg').directive('storeMention', Mention);
    function Mention() {
        return {
            restrict: 'E',
            scope: {},
            controllerAs: 'vm',
            bindToController: {
                store : '='
            },
            template: '<span class="store-mention">{{ vm.getShortName(vm.store) }}</span>',
            controller : ['storeService', function(storeService){
                var vm = this;
                vm.getShortName = storeService.getShortName;
            }]
        }
    }
})();
'use strict';

(function () {
    angular.module('ssNg').directive('mention', Mention);
    function Mention() {
        return {
            restrict: 'E',
            scope: {},
            controllerAs: 'vm',
            bindToController: {
                isSubject : '=',
                staffMember : '='
            },
            templateUrl: 'components/feeds/mention.html',
            controller : [function(){
                var vm = this;
            }]
        }
    }
})();
angular.module('ssNg').directive('likeAction', [ 'staffService', '_', 'newsService', function(staffService, _, newsService){

    return {
        restrict: 'E',
        templateUrl: 'components/feeds/likeAction.html',
        controllerAs: 'vm',
        bindToController: {
            activity : '=',
            spotId : '='
        },
        controller: function(){

            var vm = this;

            vm.likeFeedItem = function(){
                vm.activity.likes = vm.activity.likes || [];
                vm.activity.likes.push(staffService.getCurrentStaffMember().id);
                newsService.like(vm.activity.id);
            };

            vm.unLikeFeedItem = function(){
                vm.activity.likes = vm.activity.likes || [];
                var index = vm.activity.likes.indexOf(staffService.getCurrentStaffMember().id);
                if(index > -1){
                    newsService.like(vm.activity.id);
                    vm.activity.likes.splice(index, 1);
                }
            };

            vm.likedByYou = function(){
                if(!vm.activity) return false;
                vm.activity.likes = vm.activity.likes || [];
                var id = staffService.getCurrentStaffMember().id;
                return vm.activity.likes.indexOf(id) > -1;
            };

        }
    }
} ]);

'use strict';

angular.module('ssNg')
    .directive('comments', function () {
        return {
            restrict: 'E',
            scope:  {},
            controller: 'CommentsController',
            controllerAs: 'vm',
            bindToController: {
                objectId : '=',
                objectType : '=',
                recipientId : '='
            },
            templateUrl: 'components/feeds/comments.html'
        }
    });
angular.module('ssNg').controller('CommentsController', ['$http', '$scope', 'staffService', 'Auth', '_', '$sce', '$location', '$timeout', '$rootScope', '$anchorScroll', function ($http, $scope, staffService, Auth, _, $sce, $location, $timeout, $rootScope, $anchorScroll) {

    var vm = this;

    vm.getStaffMember = staffService.getCurrentStaffMember;

    vm.staff = [];

    function updateStaff() {
        vm.staff = _.filter(_.map(Auth.getCurrentUser().staff, function (x) {
            x.label = x.slug;
            return x;
        }), function (staff) {
            return staff.id != staffService.getCurrentStaffMember().id;
        });
    }

    updateStaff();

    $rootScope.$on('ss:staffMemberChanged', function () {
        updateStaff();
    });

    vm.newComment = null;

    vm.mentions = {};

    vm.comments = [];

    vm.activityReferenceId = $location.search().activityReferenceId;

    $timeout(function () {
        vm.clearHighlights = true;
    }, 1000);

    function loadComments() {
        return $http.get('/api/activity/?direction=asc&objectId=' + vm.objectId).success(function (data) {
            vm.comments = data;
            vm.lockCommentForm = false;
        });
    }

    $scope.$watch('vm.objectId', function (newValue) {
        if (newValue) {
            loadComments().then(function () {
                if (vm.activityReferenceId) {
                    $location.hash(vm.activityReferenceId);
                    $anchorScroll();
                }
            });
        }
    });

    function createPost(text) {
        var comment = {
            id: 'pending', comment: text, objectId: vm.objectId, objectType: vm.objectType, store: Auth.getCurrentUser().names[0].text
        };
        comment.subject = vm.getStaffMember();
        comment.createdAt = new Date().getTime();
        return comment;
    }

    vm.addComment = function () {
        var comment = createPost(vm.newComment);
        vm.comments.push(comment);
        vm.lockCommentForm = true;
        $http.post('/api/activity/comments/', {recipientId: vm.recipientId, comment: comment.comment, objectId: comment.objectId, objectType: comment.objectType, mentions: Object.keys(vm.mentions)}).success(function (data) {
            vm.comments[vm.comments.length - 1].id = data.id;
            vm.newComment = null;
            vm.lockCommentForm = false;
        })
    };

    vm.deleteComment = function (id, index) {
        var confirmed = confirm('Are you sure you want to delete this comment?');
        if (confirmed) {
            vm.comments.splice(index, 1);
            $http.delete('/api/activity/comments/' + id, {}).success(function () {
            });
        }
    };

    vm.vote = function (comment) {
        var index = comment.votes.indexOf(vm.getStaffMember().id);
        if (index > -1) {
            comment.votes.splice(index, 1);
        } else {
            comment.votes.push(vm.getStaffMember().id);
        }
        $http.put('/api/comments/' + comment.id + '/vote');
    };

    vm.isVotedFor = function (comment) {
        if (!comment) return false;
        return comment.votes.indexOf(vm.getStaffMember()._id) > -1;
    };

    vm.trySubmit = function ($event) {
        //Hack to get around mentio not being selected.
        if (angular.element('mentio-menu').is(':visible')) return;
        if ($event.keyCode == 13) {
            vm.addComment()
        }
    };

    vm.getMentionText = function (item) {
        vm.mentions[item.id] = true;
        return '@' + item.slug;
    };

    vm.hydrateComment = function (comment) {
        return $sce.trustAsHtml(comment.comment.replace(/(@(\S*))/g, '<a href="/staff/$2">@$2</a>'));
    }
}
]);

angular.module('ssNg').factory('featureService', ['Auth', '$location', function (Auth, $location) {

    function FeatureService(){
    }

    var featuresByHost = {
        'feature_signin_classic' : [ 'test.seekstock.nz', 'seekstock.nz', 'hallensteins.seekstock.nz', '192.168.1.102', 'localhost'],
        'feature_signin_oauth' : ['test.seekstock.nz', 'localhost'],
        'feature_analytics' : ['seekstock.nz', 'hallensteins.seekstock.nz']
    };

    /**
     * @param feature request|feedback
     * @returns {*}
     */
    FeatureService.prototype.isEnabled  = function(feature){
        if(featuresByHost[feature]){
            var host = $location.host();
            return featuresByHost[feature].indexOf(host) > -1;
        }
        var store = Auth.getCurrentUser();
        if(!store) return false;
        return !!store.organisation['feature_' + feature];
    };

    return new FeatureService();

}]);
'use strict';

angular.module('ssNg.auth', [
  'ssNg.util',
  'ngCookies',
  'ui.router'
])
  .config(function($httpProvider) {
    $httpProvider.interceptors.push('authInterceptor');
  });

'use strict';

(function () {

    angular.module('ssNg.auth').factory('userService', ['apiRoot', '$http', UserService]);

    function UserService(apiRoot, $http) {
        var root = apiRoot + '/users/';
        return {
            getUser : function() {
                return $http({ url : root + 'me', method: 'GET' }).then(function(res){
                    return res.data;
                })
            }
        }
    }
})();

angular.module('ssNg').factory('intercomService', ['$window', function ($window) {
    return {
        setStaffMember: function (staffName, staffId, staffCreated) {
            $window.Intercom('shutdown');
            $window.Intercom('boot', {
                app_id: "bcv39bcj",
                name: staffName,
                user_id: staffId,
                created_at: new Date(staffCreated).getTime() / 1000
            });
        }
    }
}]);
'use strict';

(function () {

    function RequestContextInterceptor($rootScope, $q, $cookies, $injector, Util) {
        var state;
        return {
            request : function(config) {
                config.headers = config.headers || {};
                var accessToken = $cookies.get('accessToken');
                var staffId = sessionStorage.getItem('staffId');
                if (Util.isSameOrigin(config.url)) {
                    if(accessToken) config.headers.Authorization = 'Bearer ' + accessToken;
                    if(staffId) config.headers['x-seekstock-staffId'] = staffId;
                }
                return config;
            },

            // Intercept 401s and redirect you to login
            responseError: function(response) {
                if (response.status === 401) {
                    (state || (state = $injector.get('$state'))).go('public');
                    // remove any stale tokens
                    $cookies.remove('accessToken');
                }
                return $q.reject(response);
            }
        };
    }

    angular.module('ssNg.auth')
        .factory('authInterceptor', RequestContextInterceptor);

})();

'use strict';

(function () {

    angular.module('ssNg.auth').factory('Auth', ['$location', '$http', '$cookies', '$q', 'Util', 'userService', 'staffService', '$rootScope', '$state', AuthService]);

    function AuthService($location, $http, $cookies, $q, Util, userService, staffService, $rootScope, $state) {

        var currentUser = {organisation: {}};

        var cookieName = 'accessToken';

        var currentStoreKey = 'seekstock.nz:currentStoreKey';

        var Auth = {
            login: function (user) {
                return $http.post('/auth/local', {
                    email: user.email,
                    password: user.password
                })
                .then(function (res) {
                    $cookies.put(cookieName, res.data.accessToken);
                    return user;
                })
                .catch(function(e) {
                    Auth.logout();
                    if (e.status === 401) e.data = {message: 'Email or password are incorrect.'};
                    return $q.reject(e.data);
                });
            },

            logout: function () {
                $cookies.remove(cookieName);
                sessionStorage.clear();
                currentUser = {};
                $state.go('public');
            },


            getCurrentUser: function () {
                return currentUser;
            },

            getStoreAsync: function () {
                return $q(function (resolve, reject) {
                    if (currentUser.id) resolve(currentUser);
                    Auth.reLoadUser().then(function (res) {
                        resolve(res);
                    })
                });
            },

            reLoadUser: function () {
                if (!Auth.getToken()) return $q(function (resolve, reject) {
                    resolve(null);
                });
                return userService.getUser().then(function (res) {
                    currentUser = res;
                    return currentUser;
                }).catch(function (e) {
                    return {};
                })
            },

            isLoggedIn: function () {
                if (!currentUser) return false;
                return !!currentUser.id;
            },

            /**
             * Get auth token
             *
             * @return {String} - a token string used for authenticating
             */
            getToken: function () {
                return $cookies.get(cookieName);
            }
        };

        return Auth;
    }

})();

'use strict';

angular.module('ssNg.stores', [
  'ssNg.auth',
  'ui.router'
]);

'use strict';

angular.module('ssNg.stores')
  .config(function($stateProvider) {
    $stateProvider
      .state('stores', {
        url: '/stores',
        templateUrl: 'stores/stores.html',
        controller: 'StoresController',
        controllerAs: 'vm',
        authenticate: true,
          parent: 'main'
    })
  });

'use strict';

(function(){

  angular.module('ssNg.stores').controller('StoresController', ['storeService', '$window', '$location', 'Auth', StoresController]);

  function StoresController(storeService, $window, $location, Auth) {

      var vm = this;

      vm.storeService = storeService;

      vm.rows = {};

      vm.store = null;
      Auth.getStoreAsync().then(function(res){
          vm.store = res;
         listStores();
      });

      vm.updateStore = function(store){
          storeService.updateStore({ id : store.id, names : store.names });
      };

      function listStores() {
          storeService.listStores({organisationId: vm.store.organisation.id}).then(function (res) {
              vm.list = res;
          });
      }
  }

})();

'use strict';

(function () {

    angular.module('ssNg.stores').factory('storeService', ['apiRoot', '$http', '$window', '$rootScope', '$q', StoreService]);

    function StoreService(apiRoot, $http, $window, $rootScope, $q) {
        var root = apiRoot + '/stores/';
        return {
            listStores : function(command){
                return $http({ url : root, method: 'GET', params : {organisationId : command.organisationId }}).then(function(res){
                   return res.data;
                })
            },
            createStore : function(command){
                return $http({ url : root, method: 'POST', data : command }).then(function(res){
                    return res.data;
                })
            },
            updateStore : function(command){
                return $http({ url : root + command.id, method: 'PUT', data : command }).then(function(res){
                    return res.data;
                })
            },
            getShortName : function(store){
                if(!store || !store.names) return null;
                var map = {
                    wellington : 'WGN',
                    newmarket : 'NMT',
                    headquarters : 'HQ',
                    losangeles: 'LA',
                    melbourne: 'MEL',
                    seekstock : 'HQ'
                };
                var text = store.names[0].text.toLowerCase();
                return map[text] || text;
            }
        }
    }

})();

'use strict';

angular.module('ssNg.staff', [
  'ssNg.auth',
  'ui.router'
]);

'use strict';

(function () {

    angular.module('ssNg.staff').factory('staffService', ['apiRoot', '$http', '$window', '$rootScope', '$q', '$uibModal', '$timeout', 'intercomService', '_', StaffService]);

    function StaffService(apiRoot, $http, $window, $rootScope, $q, $uibModal, $timeout, intercomService, _) {
        var root = apiRoot + '/staff/';
        var staffMemberKey = 'seekstock.nz:currentStaffMember';

        return {
            listStaff: function (command) {
                return $http({url: root, method: 'GET', params: command}).then(function (res) {
                    return res.data;
                })
            },
            createStaff: function (command) {
                return $http({url: root, method: 'POST', data: command}).then(function (res) {
                    $rootScope.$emit('bagpipes:contextChanged', res);
                    return res.data;
                })
            },
            deleteStaff: function (command) {
                return $http({url: root + '/' + command.id, method: 'DELETE'}).then(function (res) {
                    return res.data;
                })
            },
            clearCurrentStaffMember: function () {
                sessionStorage.clear();
            },
            getCurrentStaffMember: function () {
                return JSON.parse(sessionStorage.getItem(staffMemberKey)) || {};
            },
            setCurrentStaffMember: function (staff) {
                var data = { previous : this.getCurrentStaffMember(), current : staff };
                sessionStorage.setItem(staffMemberKey, JSON.stringify(staff));
                sessionStorage.setItem('staffId', staff.id);
                intercomService.setStaffMember(staff.names[0].text, staff.id, staff.createdAt);
                $rootScope.$emit('ss:staffMemberChanged', data);
            },
            openMemberSelector: function(){
                var modal = $uibModal.open({
                    templateUrl: 'main/chooseStaffMemberForm.html',
                    controller: 'ChooseStaffMemberFormController',
                    controllerAs: 'vm',
                    animation: false,
                    bindToController: true
                });
            },
            checkMemberSelected: function (store) {
                var id = this.getCurrentStaffMember().id;
                if(id && _.some(store.staff,['id', id])) return;
                this.clearCurrentStaffMember();
                $timeout(this.openMemberSelector, 500);
            }
        }
    }

})();

'use strict';

angular.module('ssNg.staff')
  .config(function($stateProvider) {
    $stateProvider
      .state('staff', {
        url: '/staff',
        templateUrl: 'staff/staff.html',
        controller: 'StaffController',
        controllerAs: 'staff',
        authenticate: true,
          parent: 'main'
    })
  });

'use strict';

(function(){

  angular.module('ssNg.staff').controller('StaffController', ['staffService', '$window', '$location', 'Auth', 'storeService', '_', StaffController]);

  function StaffController(staffService, $window, $location, Auth, storeService, _) {

      var that = this;

      that.newMember = {};
      that.organisationId = null;
      that.storeId = null;

      function listStores() {
          return storeService.listStores({organisationId: that.organisationId }).then(function(res){
              that.stores = res;
          });
      }

      Auth.getStoreAsync().then(function(res){
          that.storeName = res.names[0].text;
          that.organisationId = res.organisation.id;
          that.storeId = res.id;
          listStaff();
          listStores();
      });

      function listStaff(){
          return staffService.listStaff({organisationId: that.organisationId, storeId : that.storeId }).then(function(res){
              that.list = res;
          });
      }

      that.getStore = function(storeId){
            return _.find(that.stores, ['id', storeId]);
      };

      that.createStaff = function(){
          var command = {
              names : [{ text : that.newMember.name }],
              organisationId : that.organisationId,
              storeId : that.storeId
          };
        staffService.createStaff(command).then(function(res){
            that.newMember = {};
            listStaff();
            Auth.reLoadUser();
        })
      };
  }

})();

'use strict';

angular.module('ssNg.snapIns', []);

'use strict';

(function () {

    angular.module('ssNg.snapIns').factory('snapInService', ['apiRoot', '$http', '$window', '$rootScope', '$q', SnapInService]);

    function SnapInService(apiRoot, $http, $window, $rootScope, $q) {
        var root = apiRoot + '/destinations/';
        return {
            add : function(name){
                $window.location.href = root + 'add/' + name;
            }
        }
    }

})();

'use strict';

angular.module('ssNg.snapIns')
    .config(function($stateProvider) {
        $stateProvider
            .state('snap-ins', {
                url: '/snap-ins',
                templateUrl: 'snap-ins/snap-ins.html',
                controller: 'SnapInsController',
                controllerAs: 'snapins',
                authenticate: true,
                parent: 'main'
            })
    });
'use strict';
(function () {

    angular.module('ssNg.snapIns').controller('SnapInsController', ['$rootScope', '$state', '$location', 'Auth', SnapInsController]);

    function SnapInsController($rootScope, $state, $location, Auth) {


    }

})();

'use strict';

angular.module('ssNg.search', ['algoliasearch']);
angular.module('ssNg.search').directive('searchBox', ['$http', '_', '$location', 'searchService',  function ($http, _, $location, searchService) {

    return {
        restrict: 'E',
        templateUrl: 'search/searchBox.html',
        scope: {
            selectedEvent: '=',
            placeHolder: '=?',
            hideButton: '=?',
            cssClass: '=?',
            categories: '=?',
            includeExternalPlaces: '=?'
        },
        controller: ['$scope', '$rootScope', '$state', function ($scope, $rootScope, $state) {

            $scope.placeHolder = $scope.placeHolder || 'enter product or description to start...';

            $scope.aid = null;

            $scope.scount = 0;

            $scope.searchTerm = $location.search().term;

            $scope.$watch('searchTerm', function(newVal, oldVal) {
                var isResultsPageAndSearchCleared = oldVal && !newVal && $state.current.name === 'search-results';
                if(isResultsPageAndSearchCleared){
                    return $state.go('news');
                }
                if(!newVal) return;
                searchService.search(newVal);
                $state.go('search-results');
                $location.search({ term : newVal});
            });
        }]
    }
}]);


'use strict';

(function () {

    angular.module('ssNg.search').factory('searchService', ['algolia', '$window', '$rootScope', 'Auth', SearchService]);

    function SearchService(algolia, $window, $rootScope, Auth) {

        var client = algolia.Client("M96FY1SE39", '0f7f4674e053a9d6fe0c5fdd8c7b30f4');
        var index = null;

        Auth.getStoreAsync().then(function(res){
            index = client.initIndex(res.organisation.productSearchIndex);
        });

        return {
            results : [],
            search : function(term){
                var that = this;
                if(!term) {
                    return that.results = [];
                }
                index.search(term).then(function searchSuccess(content) {
                       that.results =  content.hits;
                    }, function searchFailure(err) {
                        console.log(err);
                });
            }
        }
    }

})();

'use strict';

angular.module('ssNg.search')
    .config(function($stateProvider) {
        $stateProvider
            .state('search-results', {
                url: '/search-results',
                templateUrl: 'search/results.html',
                controller: 'ResultsController',
                controllerAs: 'vm',
                authenticate: true,
                parent: 'main',
                reloadOnSearch: false
            })
    });
'use strict';

(function () {


    angular.module('ssNg.search').controller('ResultsController', ['searchService', 'feedbackService', 'requestService','requestFeedbackService', 'featureService', ResultsController]);

    function ResultsController(searchService, feedbackService, requestService, requestFeedbackService, featureService) {

        var vm = this;

        vm.search = searchService;

        vm.featureService = featureService;

        vm.openFeedback = feedbackService.openFeedback;

        vm.openRequest = requestService.openRequest;
        
        vm.openRequestFeedback = requestFeedbackService.openRequestFeedback;

    }

})();

'use strict';

angular.module('ssNg.requests', [
  'ssNg.auth',
  'ui.router'
]);

'use strict';
(function () {

    angular.module('ssNg.requests').controller('requestFormController', ['$rootScope', '$state', '$location', 'requestService', 'product', '$uibModalInstance', RequestFormController]);

    function RequestFormController($rootScope, $state, $location, requestService, product, $uibModalInstance) {
        var vm = this;
        vm.product = product;

        vm.productTypes = [
            { name : 'Shirt', id : 11},
            { name : 'Pants', id : 11},
            { name : 'Jacket', id : 12},
            { name : 'Accessories', id : 12},
            { name : 'Footwear', id : 12},
            { name : 'Shorts', id : 12},
            { name : 'T-Shirts', id : 12},
            { name : 'Suit Jackets', id : 12},
        ];
        vm.colours = [
            {id: 1, name: 'Any'},
            {name: 'red', id: 11},
            {name: 'green', id: 12},
            {name: 'blue', id: 13}
            ];
        vm.sizes = [
            {id: 1, name: 'One Size'},
            {id: 11, name: 'XS'},
            {name: 'S', id: 12},
            {name: 'M', id: 13},
            {name: 'L', id: 14},
            {name: 'XL', id: 15},
            {name: 'XXL', id: 16},
            {name: 'XXXL', id: 17}];

        vm.request = {
            sku: product.sku
        };

        vm.selectedProductType = vm.productTypes[0];
        vm.selectedColour = vm.colours[0];
        vm.selectedSize = vm.sizes[0];

        vm.createRequest = function () {
            vm.request.colour = vm.selectedColour.name;
            vm.request.size = vm.selectedSize.name;
            vm.request.productType = vm.selectedProductType.name;
            requestService.createRequest(vm.request).then(function (res) {
                $state.go('news');
                $uibModalInstance.close();
            });
        };

        vm.dateOptions = {
            formatYear: 'yy',
            maxDate: new Date(2020, 5, 22),
            minDate: new Date(),
            startingDay: 1
        };

    }

})();
'use strict';

(function () {

    angular.module('ssNg.requests').factory('requestService', ['apiRoot', '$http', '$uibModal', RequestService]);

    function RequestService(apiRoot, $http, $uibModal) {
        var root = apiRoot + '/requests/';
        return {
            tags : ['fit', 'style', 'size', 'colour', 'quality'],
            createRequest : function(command){
                return $http({ url : root, method: 'POST', data: command}).then(function(res){
                   return res.data;
                })
            },
            openRequest : function(product){
                $uibModal.open({
                    templateUrl : 'requests/requestForm.html',
                    controller: 'requestFormController',
                    controllerAs: 'vm',
                    resolve : {
                        product : product
                    }
                });
            }
        }
    }

})();

'use strict';

(function () {
    angular.module('ssNg').directive('requestFeedbackLabels', FeedbackLabels);
    function FeedbackLabels() {
        return {
            restrict: 'E',
            scope: {},
            controllerAs: 'vm',
            bindToController: {
                requestFeedback: '='
            },
            templateUrl: 'requestFeedback/requestFeedbackLabels.html',
            controller: [function () {
                var vm = this;
            }]
        }
    }
})();
'use strict';

angular.module('ssNg.requestFeedback', [
  'ssNg.auth',
  'ui.router'
]);

'use strict';
(function () {

    angular.module('ssNg.requestFeedback').controller('requestFeedbackFormController', ['$rootScope', '$state', '$location', 'requestFeedbackService', 'product', '$uibModalInstance', requestFeedbackFormController]);

    function requestFeedbackFormController($rootScope, $state, $location, requestFeedbackService, product, $uibModalInstance) {
        var vm = this;

        vm.product = product;

        vm.requestFeedback = {
            sku : product.sku,
            tags : []
        };

        vm.createRequestFeedback = function(){
            requestFeedbackService.createRequestFeedback(vm.requestFeedback).then(function(res){
                $state.go('news');
                $uibModalInstance.close();
            });
        };

        vm.tags = requestFeedbackService.tags;

        vm.toggleCategory = function toggleCategory(category) {
            var index = vm.requestFeedback.tags.indexOf(category);
            if (index > -1) return vm.requestFeedback.tags.splice(index, 1);
            vm.requestFeedback.tags.push(category);
        };
    }

})();
'use strict';

(function () {

    angular.module('ssNg.requestFeedback').factory('requestFeedbackService', ['apiRoot', '$http', '$uibModal', FeedbackService]);

    function FeedbackService(apiRoot, $http, $uibModal) {
        var root = apiRoot + '/requestFeedback/';
        return {
            tags : ['price','fit', 'style', 'size', 'colour', 'quality'],
            createRequestFeedback : function(command){
                return $http({ url : root, method: 'POST', data: command}).then(function(res){
                   return res.data;
                })
            },
            openRequestFeedback : function(product){
                $uibModal.open({
                    templateUrl : 'requestFeedback/requestFeedbackForm.html',
                    controller: 'requestFeedbackFormController',
                    controllerAs: 'vm',
                    resolve : {
                        product : product
                    }
                });
            }
        }
    }

})();

'use strict';

angular.module('ssNg.profiles', [
  'ssNg.auth',
  'ui.router'
]);

'use strict';

(function () {

    angular.module('ssNg.profiles').factory('profileService', ['apiRoot', '$http', '$window', '$rootScope', '$q', 'Auth', ProfileService]);

    function ProfileService(apiRoot, $http, $window, $rootScope, $q, Auth) {
        var root = apiRoot + '/profiles/';
        return {
            uploadImage : function(command){
                return $http({ url : root, method: 'POST', data: command}).then(function(res){
                   return res.data;
                })
            }
        }
    }

})();

'use strict';
(function () {

    angular.module('ssNg.profiles').controller('profileController', ['$rootScope', '$state', '$location', 'Auth', 'profileService', 'product', profileController]);

    function profileController($rootScope, $state, $location, Auth, profileService) {
        var vm = this;

    }

})();
'use strict';

angular.module('ssNg.products', [
  'ssNg.auth',
  'ui.router'
]);

'use strict';

angular.module('ssNg.products')
    .config(function($stateProvider) {
        $stateProvider
            .state('product', {
                url: '/products/:sku',
                templateUrl: 'products/product.html',
                controller: 'ProductController',
                controllerAs: 'vm',
                authenticate: true,
                parent: 'main'
            })
    });
'use strict';

(function () {

    angular.module('ssNg.products').factory('productService', ['apiRoot', '$http', '$window', '$rootScope', '$q', 'Auth', ProductService]);

    function ProductService(apiRoot, $http, $window, $rootScope, $q, Auth) {
        var root = apiRoot + '/products/';

        var sizes = {
            XS : 1,
            S : 2,
            M : 3,
            L : 4,
            XL : 5,
            XXL : 6,
            XXXL : 7
        };

        return {
            getProduct: function(sku){
                return $http({ url : root + sku, method: 'GET'}).then(function(res){
                    return res.data;
                })
            },
            sortSize: function(sizeA, sizeB){
                var sizeAIsNumber = isNaN(sizeA);
                var sizeBIsNumber = isNaN(sizeB);
                if(!sizeAIsNumber && !sizeBIsNumber) return sizeA > sizeB;
                if(sizeAIsNumber || sizeBIsNumber) return true;
                return sizes[sizeA] > sizes[sizeB];
            }
        }
    }

})();

'use strict';
(function () {

    angular.module('ssNg.products').controller('ProductController', ['$state', 'productService', 'newsService', '$stateParams', 'feedbackService', 'requestService', 'featureService', '$location', ProductController]);

    function ProductController($state, productService, newsService, $stateParams, feedbackService, requestService, featureService, $location) {
        let vm = this;

        productService.getProduct($stateParams.sku).then(function (res) {
            vm.product = res;
            let query = $location.search();
            if(query.modal == 'feedback'){
                feedbackService.openFeedback(res);
            }
        });

        vm.openFeedback = feedbackService.openFeedback;
        vm.openRequest = requestService.openRequest;
        vm.featureService = featureService;

        vm.activities = [];

        vm.sortSize = productService.sortSize;

        vm.update = function () {
            vm.params = {store: vm.currentStore, tags: vm.currentTags, recipientId: $stateParams.sku};
            newsService.getLatest(vm.params).then(function (res) {
                vm.activities = res;
                vm.firstLoad = true;
            });
        };
        vm.update();
    }

})();
'use strict';

angular.module('ssNg.notifications', [
  'ssNg.auth',
  'ui.router'
]);

'use strict';

angular.module('ssNg.notifications')
    .config(function($stateProvider) {
        $stateProvider
            .state('notifications', {
                url: '/notifications',
                templateUrl: 'notifications/list.html',
                controller: 'NotificationListController',
                controllerAs: 'vm',
                bindToController: true,
                authenticate: true,
                parent: 'main'
            })
    });
'use strict';
(function () {

    angular.module('ssNg.notifications').controller('NotificationListController', ['notificationService', 'storeService', '$timeout', '_', '$state', NotificationListController]);

    function NotificationListController(notificationService, storeService, $timeout, _, $state) {
        var vm = this;

        vm.getNotifications = notificationService.getNotifications;

        if($state.current.name == 'notifications') {
            notificationService.markAsRead();
        }
        vm.getShortName = storeService.getShortName;
    }

})();
'use strict';

(function () {

    angular.module('ssNg.notifications').factory('notificationService', ['apiRoot', '$http', '_', '$rootScope','staffService', 'messaging', '$timeout', NotificationService]);

    function NotificationService(apiRoot, $http, _, $rootScope, staffService, messaging, $timeout) {
        var root = apiRoot + '/notifications/';

        var unread = [];

        var notifications = [];

        function unsubscribe(id) {
            //  messaging.client.unsubscribe({
            //     channel : messaging.getChannelKey('notification', 'created', id)
            // });
        }

        function subscribe() {
            //var channelKey = messaging.getChannelKey('notification', 'created', staffService.getCurrentStaffMember().id);
            //console.log('CHANNEL KEY', channelKey);
            // messaging.client.subscribe({
            //     channel: channelKey,
            //     message: function (message, envelope, channelOrGroup, time, channel) {
            //         $rootScope.$apply(unread.unshift(message));
            //         $rootScope.$apply(notifications.unshift(message));
            //     }
            // });
        }

        var service = {
            getNotifications : function () {
                return notifications;
            },
            getUnread : function(){
                return unread || []
            },
            getLatest: function (staffId) {
                return $http({url: root + staffId, method: 'GET', params: { hydrate : true }}).then(function (res) {
                    var notifications = res.data;
                    unread = _.filter(notifications, ['read', false]);
                    return notifications;
                })
            },
            markAsRead: function () {
                return $http({
                    url: root + 'mark-as-read', method: 'PUT',
                    data: {notificationIds: _.map(unread, 'id')}
                }).then(function (res) {
                    $timeout(function(){
                        _.forEach(notifications, function (x) {
                            x.read = true;
                        });
                        unread = [];
                    }, 3000);
                })
            }
        };

        function loadNotifications() {
            service.getLatest(staffService.getCurrentStaffMember().id).then(function (res) {
                notifications = res;
            });
        }
        loadNotifications();

        $rootScope.$on('ss:staffMemberChanged', function(event, data){
            if(data.previous && data.previous.id) unsubscribe(data.previous.id);
            subscribe(data.current.id);
            loadNotifications()
        });

        return service;
    }

})();

'use strict';

(function () {

    angular.module('ssNg.profiles').factory('newsService', ['apiRoot', '$http', '_', NewsService]);

    function NewsService(apiRoot, $http, _) {
        var root = apiRoot + '/news/';

        //on message receipt, put it into the current bucket(s) check if its been read (news.getUnread())
        //when that bucket is viewed zero out the unread posts after n seconds (news.setRead(activityIds)
        //send a message to the server with what has been read (news.setRead(activityIds))
        //items with an unread state will have a special class
        var unread = {};

        function incrementUnread(activities) {
            _.forEach(activities, function (activity) {
                for (var store in unread.stores) {
                    if (!unread.stores.hasOwnProperty(store)) continue;
                    if (store === activity.store.toLowerCase() && !activity.read) unread.stores[store]++;
                }
                for (var tag in unread.tags) {
                    if (!unread.tags.hasOwnProperty(tag)) continue;
                    if (activity.tags.indexOf(tag) > -1 && !activity.read) unread.tags[tag]++;
                }
            });
        }

        return {
            like: function (activityId) {
                return $http({url: root + activityId + '/like', method: 'PUT'}).then(function (res) {
                    return res.data;
                })
            },
            getLatest: function (command) {
                var that = this;
                return $http({url: root, method: 'GET', params: command}).then(function (res) {
                    return res.data;
                })
            },
            markAsRead: function (activities) {
                return $http({url: root + 'mark-as-read', method: 'PUT', data: {activityIds: _.map(activities, 'id')}}).then(function (res) {
                    _.forEach(activities, function (x) {
                        x.read = true;
                    });
                    return activities;
                })
            },
            getUnreadCounts: function () {
                return unread;
            },
            // reloadUnread: function () {
            //     return $http({url: root + 'unread-counts', method: 'GET'}).then(function (res) {
            //         unread = res.data;
            //     });
            // },
            incrementUnread: incrementUnread
        }
    }

})();

'use strict';

angular.module('ssNg.news', [
  'ssNg.auth',
  'ui.router'
]);

'use strict';

angular.module('ssNg.news')
  .config(function($stateProvider) {

      $stateProvider
          .state('news', {
              url: '/',
              params: {
                  store: null,
                  tag: null
              },
              templateUrl: 'news/news.html',
              controller: 'NewsController',
              controllerAs: 'vm',
              authenticate: true,
              parent: 'main'
          })
  });

'use strict';

(function () {

    angular.module('ssNg.news').controller('NewsController',
        ['Auth', '$window', 'messaging', '$scope', 'newsService', 'staffService', '$stateParams', '$state', '_', 'storeService', 'feedbackService', NewsController]);


    function NewsController(Auth, $window, messaging, $scope, newsService, staffService, $stateParams, $state,_, storeService, feedbackService) {


        var vm = this;

        vm.activities = [];

        vm.firstLoad = false;

        vm.stateParams = $stateParams;

        vm.staffMember = staffService.getCurrentStaffMember;

        vm.getShortName = storeService.getShortName;

        vm.tags = feedbackService.tags;

        Auth.getStoreAsync().then(function (res) {
            vm.stores = res.stores;
            vm.stores.unshift({names: [{text: 'All Stores'}], id: null});
        });

        vm.currentStore = null;

        vm.currentTags = [];

        vm.toggleCategory = function toggleCategory(category) {
            var index = vm.currentTags.indexOf(category);
            if (index > -1) {
                vm.currentTags.splice(index, 1);
            } else {
                vm.currentTags.push(category);
            }
            vm.update();
        };

        vm.params = {};

        vm.isCompletelyEmpty = function () {
            return Object.keys(vm.params.tags).length === 0 && !vm.params.store;
        };

        vm.update = function () {
            vm.params = {storeId: vm.currentStore ? vm.currentStore.id : null, tags: vm.currentTags};
            newsService.getLatest(vm.params).then(function (res) {
                vm.activities = res;
                vm.firstLoad = true;
            });
        };

        vm.status = {
            isCustomHeaderOpen: false,
            isFirstOpen: true,
            isFirstDisabled: false
        };
        vm.openFeedback = feedbackService.openFeedback;

        vm.update();


        // messaging.client.subscribe({
        //     channel: messaging.getChannelKey('activity', 'created'),
        //     message: function (message, envelope, channelOrGroup, time, channel) {
        //         if(staffService.getCurrentStaffMember().id == message.subject.id) return;
        //         $scope.$apply(vm.activities.unshift(message));
        //     }
        // });
        //
        // messaging.client.subscribe({
        //     channel: messaging.getChannelKey('activity', 'updated'),
        //     message: function (message, envelope, channelOrGroup, time, channel) {
        //         var activity = _.find(vm.activities, ['id', message.id]);
        //         if (!activity) return console.log('cant find message');
        //         $scope.$apply(angular.copy(message, activity));
        //     }
        // });
    }
})();

'use strict';
(function () {

    angular.module('ssNg').controller('PublicController', ['$http', 'featureService', PublicController]);

    function PublicController($http, featureService) {
        var vm = this;
        vm.$http = $http;
        vm.isEnabled = featureService.isEnabled;
    }

})();

'use strict';

angular.module('ssNg')
    .config(function ($stateProvider) {
        $stateProvider
            .state('public', {
                url: '/public',
                templateUrl: 'main/public.html',
                controller: 'PublicController',
                controllerAs: 'vm'
            })
            .state('main', {
                templateUrl: 'main/main.html',
                authenticate: true,
                controller: 'MainController',
                controllerAs: 'vm'
            }).state('login', {
                url: '/login',
                templateUrl: 'main/login.html',
                controller: 'LoginController',
                controllerAs: 'vm'
            }).state('weekly-report', {
            url: '/weekly-report',
            templateUrl: 'main/weeklyReport.html'
        })
        });

'use strict';
(function () {

    angular.module('ssNg').controller('MainController', ['$http', 'feedbackService', 'newsService', MainController]);

    function MainController($http, feedbackService, newsService) {
        var vm = this;

        vm.$http = $http;

        vm.tags = feedbackService.tags;

        // vm.getUnread = function(command){
        //     var key = Object.keys(command)[0];
        //     var section = newsService.getUnreadCounts()[key];
        //     if(!section) return 0;
        //     return section[command[key]];
        // }
    }
})();
'use strict';


(function(){

    angular.module('ssNg')
        .controller('LoginController', LoginController);

    function LoginController(Auth, $state) {
    }

})();

'use strict';
(function () {

    angular.module('ssNg').controller('ChooseStaffMemberFormController', ['staffService', 'Auth', '_', ChooseStaffMemberFormController]);

    function ChooseStaffMemberFormController(staffService, Auth, _) {

        var vm = this;

        staffService.listStaff({organisationId: Auth.getCurrentUser().organisation.id}).then(function (res) {
            vm.staff = res;
        });

        vm.setStaffMember = function (staffMember) {
            staffService.setCurrentStaffMember(staffMember);
            return Auth.reLoadUser().then(function (res) {
                vm.$dismiss();
            });
        };

        vm.createStaff = function () {
            var command = {
                names: [{text: vm.fullName}],
                organisationId: Auth.getCurrentUser().organisation.id,
                storeId: Auth.getCurrentUser().id
            };
            var id;
            staffService.createStaff(command).then(function (res) {
                id = res.id;
                vm.fullName = null;
                return Auth.reLoadUser();
            }).then(function (res) {
                var staff = _.find(res.staff, ['id', id]);
                staffService.setCurrentStaffMember(staff);
                vm.$close();
            })
        }

    }

})();

'use strict';

angular.module('ssNg.insights', [
  'ssNg.auth',
  'chart.js',
  'ui.router'
]);

'use strict';

(function () {

    angular.module('ssNg.insights').factory('insightService', ['apiRoot', '$http', '$window', '$rootScope', '$q', 'Auth', InsightService]);

    function InsightService(apiRoot, $http, $window, $rootScope, $q, Auth) {
        var root = apiRoot + '/insights/';
        return {
            getTopStaff: function () {
                return $http({url: root + 'top-staff', method: 'GET'}).then(function (res) {
                    return res.data;
                });
            },
            getTopStores: function () {
                return $http({url: root + 'top-stores', method: 'GET'}).then(function (res) {
                    return res.data;
                });
            },
            getTopLineStats: function () {
                return {};
                // return $http({ url : root + sku, method: 'GET'}).then(function(res){
                //     return res.data;
                // })
            }
        }
    }

})();

'use strict';

angular.module('ssNg')
    .directive('insightsDashboard', function () {
        return {
            restrict: 'E',
            templateUrl: 'insights/dashboard.html',
            controllerAs: 'vm',
            scope: {},
            controller: ['insightService', function (insightService) {
                var vm = this;

                insightService.getTopStaff().then(function (res) {
                    vm.topStaff = {
                        data: [_.map(res, function (item) {
                            return item.quantity;
                        })],
                        labels: _.map(res, function (item) {
                            return item.staffMember.names[0].text.substring(0, 8)
                        })
                    }
                });

                insightService.getTopStores().then(function (res) {
                    vm.topStores = {
                        data: [_.map(res, function (item) {
                            return item.quantity;
                        })],
                        labels: _.map(res, function (item) {
                            return item.store.names[0].text.substring(0, 7) + '\'';
                        })
                    }
                });

                vm.stats = {
                    feedbackByStore: {
                        labels: ['Newmarket', 'Wellington'],
                        data: [
                            [3, 6]
                        ]
                    },
                    feedbackByTag: {
                        labels: ['Fit', 'Style', 'Size', 'Colour', 'Quality'],
                        data: [[5, 2, 8, 2, 1]]
                    }
                }
            }]
        }
    });
'use strict';

(function () {
    angular.module('ssNg').directive('feedbackLabels', FeedbackLabels);
    function FeedbackLabels() {
        return {
            restrict: 'E',
            scope: {},
            controllerAs: 'vm',
            bindToController: {
                feedback: '='
            },
            templateUrl: 'feedback/feedbackLabels.html',
            controller: [function () {
                var vm = this;
            }]
        }
    }
})();
'use strict';

angular.module('ssNg.feedback', [
  'ssNg.auth',
  'ui.router'
]);

'use strict';
(function () {

    angular.module('ssNg.feedback').controller('feedbackFormController', ['$rootScope', '$state', '$location', 'feedbackService', 'product', '$uibModalInstance', feedbackFormController]);

    function feedbackFormController($rootScope, $state, $location, feedbackService, product, $uibModalInstance) {
        var vm = this;

        vm.product = product;

        vm.feedback = {
            sku : product.sku,
            tags : []
        };

        vm.createFeedback = function(){
            feedbackService.createFeedback(vm.feedback).then(function(res){
                $state.go('news');
                $uibModalInstance.close();
            });
        };

        vm.tags = feedbackService.tags;

        vm.toggleCategory = function toggleCategory(category) {
            var index = vm.feedback.tags.indexOf(category);
            if (index > -1) return vm.feedback.tags.splice(index, 1);
            vm.feedback.tags.push(category);
        };
    }

})();
'use strict';

(function () {

    angular.module('ssNg.feedback').factory('feedbackService', ['apiRoot', '$http', '$uibModal', FeedbackService]);

    function FeedbackService(apiRoot, $http, $uibModal) {
        var root = apiRoot + '/feedback/';
        return {
            tags : ['fit', 'style', 'size', 'colour', 'quality'],
            createFeedback : function(command){
                return $http({ url : root, method: 'POST', data: command}).then(function(res){
                   return res.data;
                })
            },
            openFeedback : function(product){

                $uibModal.open({
                    templateUrl : 'feedback/feedbackForm.html',
                    controller: 'feedbackFormController',
                    controllerAs: 'vm',
                    resolve : {
                        product : product
                    }
                });
            }
        }
    }

})();

//# sourceMappingURL=local.min.js.map
